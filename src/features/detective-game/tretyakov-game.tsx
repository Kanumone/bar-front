import React, { useState, useCallback } from "react";
import styles from "./detective-game.module.css";
import { TretyakovRoom } from "./tretyakov-room.tsx";
import { Button } from "$ui/components/button";
import { useSceneStore } from "../../core/state";
import { GameConstants } from "$core/constants/constants";

interface Item {
  id: string;
  name: string;
  description: string;
  emoji: string;
  found: boolean;
}

const SHOW_MESSAGE_TIMEOUT = GameConstants.SHOW_ITEMS_DESCRIPTION_TIMEOUT;

const ITEMS: Item[] = [
  {
    id: "portrait",
    name: "–ü–æ—Ä—Ç—Ä–µ—Ç",
    description: "–ó–Ω–∞–º–µ–Ω–∏—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Å—Ç–∏ –≤–∑–≥–ª—è–¥. –ö–∞–∂–µ—Ç—Å—è, –±—É–¥—Ç–æ –≥–ª–∞–∑–∞ —Å–ª–µ–¥—è—Ç –∑–∞ —Ç–æ–±–æ–π.",
    emoji: "üñºÔ∏è",
    found: false,
  },
  {
    id: "vase",
    name: "–í–∞–∑–∞",
    description: "–°—Ç–∞—Ä–∏–Ω–Ω–∞—è –≤–∞–∑–∞ —Å –∏–∑—è—â–Ω—ã–º –æ—Ä–Ω–∞–º–µ–Ω—Ç–æ–º. –ì–æ–≤–æ—Ä—è—Ç, –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–¥–∞—Ä–µ–Ω–∞ –≥–∞–ª–µ—Ä–µ–µ —Å–∞–º–∏–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.",
    emoji: "üè∫",
    found: false,
  },
  {
    id: "lamp",
    name: "–§–æ–Ω–∞—Ä—å",
    description: "–§–æ–Ω–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Å–≤–µ—Ç–∏—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ. –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –≤ –ø–æ–∏—Å–∫–∞—Ö.",
    emoji: "üî¶",
    found: false,
  },
  {
    id: "key",
    name: "–ö–ª—é—á",
    description: "–ö–ª—é—á –æ—Ç –∫–∞–º–µ—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –æ–Ω –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É —Ö—Ä–∞–Ω–µ–Ω–∏—è.",
    emoji: "üîë",
    found: false,
  },
  {
    id: "books",
    name: "–ö–Ω–∏–≥–∏",
    description: "–°—Ç–∞—Ä–∏–Ω–Ω—ã–µ —Ñ–æ–ª–∏–∞–Ω—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–∞. –í –Ω–∏—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ–∫—Ä–µ—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.",
    emoji: "üìö",
    found: false,
  },
];

export const TretyakovGame: React.FC = () => {
  const [items, setItems] = useState<Item[]>(ITEMS);
  const [showInventory, setShowInventory] = useState(false);
  const [foundItem, setFoundItem] = useState<Item | null>(null);
  const [showFoundMessage, setShowFoundMessage] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
  const handleItemClick = useCallback((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {
    event.stopPropagation();
    event.preventDefault();
    const target = (event.target as HTMLElement).parentElement as HTMLElement;
    const itemID = target.id;

    const clickedItem = items.find((item) => item.id === itemID && !item.found);

    if (clickedItem) {
      clickedItem.found = true;
      setItems([...items]);
      setFoundItem(clickedItem);
      setShowFoundMessage(true);

      target.classList.add(styles.highLight);

      setTimeout(() => {
        setShowFoundMessage(false);
        target.classList.remove(styles.highLight);
      }, SHOW_MESSAGE_TIMEOUT);
    }
  }, [items]);

  const foundCount = items.filter((item) => item.found).length;
  const totalItems = items.length;

  const handleNext = () => {
    useSceneStore.getState().backToPrevScene();
  };

  return (
    <div className={styles.container}>
      {/* –ö–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
      <button
        className={styles.inventoryButton}
        onClick={() => setShowInventory(!showInventory)}
      >
        üìã –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤ ({foundCount}/{totalItems})
      </button>

      {/* –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å */}
      {showInventory && (
        <div className={styles.inventory} onClick={() => setShowInventory(false)}>
          <h3>–ò—â–µ–º:</h3>
          <div className={styles.itemsList}>
            {items.map((item) => (
              <div
                key={item.id}
                className={`${styles.inventoryItem} ${item.found ? styles.found : ""}`}
              >
                <span className={styles.emoji}>{item.emoji}</span>
                <span className={styles.itemName}>{item.name}</span>
                {item.found && <span className={styles.checkmark}>‚úì</span>}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* SVG –∫–æ–º–Ω–∞—Ç–∞ */}
      <div className={styles.roomContainer}>
        <div
          className={styles.svgContainer}
        ><TretyakovRoom handleClick={handleItemClick} /></div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ */}
      {showFoundMessage && foundItem && (
        <div className={styles.foundMessage}>
          <div className={styles.foundContent}>
            <div className={styles.foundEmoji}>{foundItem.emoji}</div>
            <div className={styles.foundName}>{foundItem.name}</div>
            <div className={styles.foundDescription}>{foundItem.description}</div>
          </div>
        </div>
      )}

      <div className={styles.progress}>
        –ù–∞–π–¥–µ–Ω–æ: {foundCount} –∏–∑ {totalItems}
        {foundCount === totalItems && (
          <>
            <div className={styles.completionMessage}>
              üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≤—Å–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã!
            </div>
            <div style={{ marginTop: "5%",
              display: "flex",
              justifyContent: "center" }}>
              <Button text="–ö –≤—ã—Ö–æ–¥—É" onClick={() => handleNext()} />
            </div>
          </>
        )}
      </div>
    </div>
  );
};
