/* tslint:disable */
/* eslint-disable */
/**
 * Telegram Games API
 * API для авторизации и игр (2048, Food Game)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActivityLogResponseDto
 */
export interface ActivityLogResponseDto {
    /**
     * 
     * @type {number}
     * @memberof ActivityLogResponseDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ActivityLogResponseDto
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogResponseDto
     */
    'action': string;
    /**
     * 
     * @type {object}
     * @memberof ActivityLogResponseDto
     */
    'details': object;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogResponseDto
     */
    'sessionId': string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogResponseDto
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface AuthResponseDto
 */
export interface AuthResponseDto {
    /**
     * Токен доступа для аутентифицированного пользователя
     * @type {string}
     * @memberof AuthResponseDto
     */
    'accessToken': string;
    /**
     * Базовая информация об аутентифицированном пользователе
     * @type {UserInfoDto}
     * @memberof AuthResponseDto
     */
    'user': UserInfoDto;
    /**
     * Идентификатор текущей сессии
     * @type {string}
     * @memberof AuthResponseDto
     */
    'sessionId': string;
}
/**
 * 
 * @export
 * @interface CreateActivityLogDto
 */
export interface CreateActivityLogDto {
    /**
     * ID пользователя
     * @type {number}
     * @memberof CreateActivityLogDto
     */
    'userId': number;
    /**
     * Действие
     * @type {string}
     * @memberof CreateActivityLogDto
     */
    'action': string;
    /**
     * Детали действия
     * @type {object}
     * @memberof CreateActivityLogDto
     */
    'details'?: object;
    /**
     * ID сессии
     * @type {string}
     * @memberof CreateActivityLogDto
     */
    'sessionId'?: string | null;
}
/**
 * 
 * @export
 * @interface UserInfoDto
 */
export interface UserInfoDto {
    /**
     * ID пользователя в системе
     * @type {number}
     * @memberof UserInfoDto
     */
    'id': number;
    /**
     * Имя пользователя
     * @type {string}
     * @memberof UserInfoDto
     */
    'firstName': string;
    /**
     * Фамилия пользователя (опционально)
     * @type {object}
     * @memberof UserInfoDto
     */
    'lastName'?: object | null;
    /**
     * Username в Telegram (опционально)
     * @type {object}
     * @memberof UserInfoDto
     */
    'username'?: object | null;
    /**
     * Роль пользователя
     * @type {string}
     * @memberof UserInfoDto
     */
    'role': UserInfoDtoRoleEnum;
    /**
     * Идентификатор текущей сессии
     * @type {string}
     * @memberof UserInfoDto
     */
    'sessionId'?: string;
}

export const UserInfoDtoRoleEnum = {
    User: 'user',
    Admin: 'admin'
} as const;

export type UserInfoDtoRoleEnum = typeof UserInfoDtoRoleEnum[keyof typeof UserInfoDtoRoleEnum];


/**
 * ActivityLogsApi - axios parameter creator
 * @export
 */
export const ActivityLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Записать новое действие пользователя
         * @param {CreateActivityLogDto} createActivityLogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerCreate: async (createActivityLogDto: CreateActivityLogDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createActivityLogDto' is not null or undefined
            assertParamExists('activityLogControllerCreate', 'createActivityLogDto', createActivityLogDto)
            const localVarPath = `/activity-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createActivityLogDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить все логи активности (с фильтрацией по пользователю)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerFindAll: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('activityLogControllerFindAll', 'userId', userId)
            const localVarPath = `/activity-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить все логи по session_id
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerFindBySession: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('activityLogControllerFindBySession', 'sessionId', sessionId)
            const localVarPath = `/activity-logs/session/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить лог активности по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activityLogControllerFindOne', 'id', id)
            const localVarPath = `/activity-logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityLogsApi - functional programming interface
 * @export
 */
export const ActivityLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivityLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Записать новое действие пользователя
         * @param {CreateActivityLogDto} createActivityLogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityLogControllerCreate(createActivityLogDto: CreateActivityLogDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityLogResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityLogControllerCreate(createActivityLogDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivityLogsApi.activityLogControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить все логи активности (с фильтрацией по пользователю)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityLogControllerFindAll(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityLogResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityLogControllerFindAll(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivityLogsApi.activityLogControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить все логи по session_id
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityLogControllerFindBySession(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityLogResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityLogControllerFindBySession(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivityLogsApi.activityLogControllerFindBySession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить лог активности по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityLogControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityLogResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityLogControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivityLogsApi.activityLogControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActivityLogsApi - factory interface
 * @export
 */
export const ActivityLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivityLogsApiFp(configuration)
    return {
        /**
         * 
         * @summary Записать новое действие пользователя
         * @param {CreateActivityLogDto} createActivityLogDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerCreate(createActivityLogDto: CreateActivityLogDto, options?: RawAxiosRequestConfig): AxiosPromise<ActivityLogResponseDto> {
            return localVarFp.activityLogControllerCreate(createActivityLogDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить все логи активности (с фильтрацией по пользователю)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerFindAll(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ActivityLogResponseDto>> {
            return localVarFp.activityLogControllerFindAll(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить все логи по session_id
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerFindBySession(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ActivityLogResponseDto>> {
            return localVarFp.activityLogControllerFindBySession(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить лог активности по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLogControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ActivityLogResponseDto> {
            return localVarFp.activityLogControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivityLogsApi - object-oriented interface
 * @export
 * @class ActivityLogsApi
 * @extends {BaseAPI}
 */
export class ActivityLogsApi extends BaseAPI {
    /**
     * 
     * @summary Записать новое действие пользователя
     * @param {CreateActivityLogDto} createActivityLogDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogsApi
     */
    public activityLogControllerCreate(createActivityLogDto: CreateActivityLogDto, options?: RawAxiosRequestConfig) {
        return ActivityLogsApiFp(this.configuration).activityLogControllerCreate(createActivityLogDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить все логи активности (с фильтрацией по пользователю)
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogsApi
     */
    public activityLogControllerFindAll(userId: number, options?: RawAxiosRequestConfig) {
        return ActivityLogsApiFp(this.configuration).activityLogControllerFindAll(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить все логи по session_id
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogsApi
     */
    public activityLogControllerFindBySession(sessionId: string, options?: RawAxiosRequestConfig) {
        return ActivityLogsApiFp(this.configuration).activityLogControllerFindBySession(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить лог активности по ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogsApi
     */
    public activityLogControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return ActivityLogsApiFp(this.configuration).activityLogControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Аутентификация пользователя через данные инициализации Telegram Mini App (initData).
         * @summary Вход через Telegram Mini App
         * @param {object} body Объект с initData из Telegram WebApp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authControllerLogin', 'body', body)
            const localVarPath = `/auth/telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Аутентификация пользователя через данные инициализации Telegram Mini App (initData).
         * @summary Вход через Telegram Mini App
         * @param {object} body Объект с initData из Telegram WebApp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Аутентификация пользователя через данные инициализации Telegram Mini App (initData).
         * @summary Вход через Telegram Mini App
         * @param {object} body Объект с initData из Telegram WebApp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: object, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponseDto> {
            return localVarFp.authControllerLogin(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Аутентификация пользователя через данные инициализации Telegram Mini App (initData).
     * @summary Вход через Telegram Mini App
     * @param {object} body Объект с initData из Telegram WebApp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(body: object, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(body, options).then((request) => request(this.axios, this.basePath));
    }
}



