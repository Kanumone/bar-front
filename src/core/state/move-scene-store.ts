import { create } from "zustand";
import { gameFlowManager } from "@processes/game-flow/game-flow-manager";
import type { QuizItem } from "@core/types/common-types";

const TIMEOUT_FOR_QUESTION = 5000; // 5 —Å–µ–∫—É–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞

interface MoveSceneState {
  questions: QuizItem[];
  currentIndex: number;
  isQuizVisible: boolean;
  stage: "intro" | "question" | "hidden";
  selected: string | null;
  canSkip: boolean;
  remainTime: number; // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  timerId: number | null; // ID —Ç–∞–π–º–µ—Ä–∞ setInterval
  isMoving: boolean; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫
  setQuestions: (questions: QuizItem[]) => void;
  startQuizCycle: () => void;
  openQuiz: (index: number) => void;
  skipIntro: () => void;
  answerQuestion: (answerId: string) => void;
  completeQuiz: () => void;
  hideQuiz: () => void;
  startTimer: () => void; // –ó–∞–ø—É—Å–∫–∞–µ—Ç/—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  pauseTimer: () => void; // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  resumeTimer: () => void; // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä
  setMoving: (moving: boolean) => void; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
}

export const useMoveSceneStore = create<MoveSceneState>((set, get) => ({
  questions: [],
  currentIndex: 0,
  isQuizVisible: false,
  stage: "hidden",
  selected: null,
  canSkip: false,
  remainTime: TIMEOUT_FOR_QUESTION, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–ª–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
  timerId: null, // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
  isMoving: false, // –ò–≥—Ä–æ–∫ –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ

  setQuestions: (questions) => set({ questions }),

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ setMoving:
  // –¢–µ–ø–µ—Ä—å –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º/–ø–∞—É–∑–æ–π —Ç–∞–π–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞.
  setMoving: (moving: boolean) => {
    set({ isMoving: moving });
    const { isQuizVisible } = get(); // –£–¥–∞–ª–µ–Ω–∞ 'stage', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å

    // –£–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–≤–∏–∑ –ù–ï –≤–∏–¥–∏–º (—Ç.–µ. –º—ã –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
    // –∏–ª–∏ –µ—Å–ª–∏ –∫–≤–∏–∑ —É–∂–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ "question" –∏ –Ω—É–∂–Ω–æ –µ–≥–æ —Å–∫—Ä—ã—Ç—å/–ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
    if (!isQuizVisible) { // –ï—Å–ª–∏ –∫–≤–∏–∑ —Å–∫—Ä—ã—Ç, —Ç–æ –º—ã –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      if (moving) {
        get().resumeTimer(); // –ü—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º/–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      } else {
        get().pauseTimer(); // –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      }
    }
    // –ï—Å–ª–∏ isQuizVisible true, —Ç–æ –∫–≤–∏–∑ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω, –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä –∫–≤–∏–∑–∞.
    // –¢–∞–π–º–µ—Ä –≤–Ω—É—Ç—Ä–∏ openQuiz/answerQuestion —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
  },

  // –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
  // –¢–∞–π–º–µ—Ä —Ç–µ–ø–µ—Ä—å –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –ø–æ–∫–∞ –∏–≥—Ä–æ–∫ –î–í–ò–ñ–ï–¢–°–Ø.
  startTimer: () => {
    const { timerId } = get();
    if (timerId !== null) {
      clearInterval(timerId); // –û—á–∏—â–∞–µ–º –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä
    }

    set({ remainTime: TIMEOUT_FOR_QUESTION }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –î–í–ò–ñ–ï–¢–°–Ø.
    if (get().isMoving) {
      const newTimerId = setInterval(() => {
        const { remainTime: currentRemainTime } = get(); // –£–¥–∞–ª–µ–Ω–∞ 'isMoving', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
        if (!get().isMoving) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
          clearInterval(newTimerId);
          set({ timerId: null });
          return;
        }

        if (currentRemainTime <= 0) {
          clearInterval(newTimerId);
          set({ timerId: null });
          get().openQuiz(get().currentIndex); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        } else {
          set((state) => ({ remainTime: state.remainTime - 1000 })); // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
        }
      }, 1000) as unknown as number;

      set({ timerId: newTimerId });
    } else {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è, —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º remainTime –∏ timerId
      set({ timerId: null });
    }
  },

  // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  pauseTimer: () => {
    const { timerId } = get();
    if (timerId !== null) {
      clearInterval(timerId);
      set({ timerId: null });
    }
  },

  // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä —Å –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏.
  // –¢–∞–π–º–µ—Ä —Ç–µ–ø–µ—Ä—å –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –ø–æ–∫–∞ –∏–≥—Ä–æ–∫ –î–í–ò–ñ–ï–¢–°–Ø.
  resumeTimer: () => {
    const { timerId, remainTime } = get(); // –£–¥–∞–ª–µ–Ω–∞ 'isMoving', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç, –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º—è, –∏ –∏–≥—Ä–æ–∫ –î–í–ò–ñ–ï–¢–°–Ø
    if (timerId === null && remainTime > 0 && get().isMoving) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º get().isMoving
      const newTimerId = setInterval(() => {
        const { remainTime: currentRemainTime } = get(); // –£–¥–∞–ª–µ–Ω–∞ 'currentIsMoving', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
        if (!get().isMoving) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
          clearInterval(newTimerId);
          set({ timerId: null });
          return;
        }

        if (currentRemainTime <= 0) {
          clearInterval(newTimerId);
          set({ timerId: null });
          get().openQuiz(get().currentIndex);
        } else {
          set((state) => ({ remainTime: state.remainTime - 1000 }));
        }
      }, 1000) as unknown as number;

      set({ timerId: newTimerId });
    }
  },

  // –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∫–≤–∏–∑–∞.
  // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è, —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è. –ï—Å–ª–∏ –Ω–µ—Ç, –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è.
  startQuizCycle: () => {
    const { questions, currentIndex, completeQuiz } = get(); // –£–¥–∞–ª–µ–Ω–∞ 'isMoving', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
    if (currentIndex >= questions.length) {
      completeQuiz();
      return;
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä. –û–Ω —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫.
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è, —Ç–∞–π–º–µ—Ä –Ω–∞—á–Ω–µ—Ç –æ—Ç—Å—á–µ—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, –æ–Ω –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è.
    get().startTimer();
  },

  /** üîπ –ü–æ–∫–∞–∑ –∫–≤–∏–∑–∞ */
  openQuiz: (index) => {
    const { questions, pauseTimer } = get();
    pauseTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–≤–∏–∑–∞

    if (index >= questions.length) {
      get().completeQuiz();
      return;
    }
    set({
      currentIndex: index,
      isQuizVisible: true,
      stage: "intro",
      selected: null,
      canSkip: false,
      remainTime: TIMEOUT_FOR_QUESTION, // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–Ω—Ç—Ä–æ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º
    setTimeout(() => {
      if (get().isQuizVisible && get().currentIndex === index) {
        set({ canSkip: true });
      }
    }, TIMEOUT_FOR_QUESTION);
  },

  skipIntro: () => {
    const { stage, canSkip } = get();
    if (stage === "intro" && canSkip) {
      set({ stage: "question" });
    }
  },

  /** üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ */
  answerQuestion: (answerId) => {
    const { currentIndex, questions, pauseTimer } = get();
    pauseTimer(); // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞

    set({ selected: answerId });
    console.log("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", { questionId: questions[currentIndex].id,
      answerId });

    setTimeout(() => {
      set({ isQuizVisible: false,
        stage: "hidden" });
      if (currentIndex < questions.length - 1) {
        set((state) => ({ currentIndex: state.currentIndex + 1 })); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
        // –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞, –∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∫–≤–∏–∑–∞.
        // startQuizCycle —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ isMoving –∏ –∑–∞–ø—É—Å—Ç–∏—Ç —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è.
        setTimeout(() => get().startQuizCycle(), 1000);
      } else {
        get().completeQuiz();
      }
    }, 1000); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –∫–≤–∏–∑–∞
  },

  completeQuiz: () => {
    // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
    set({ isQuizVisible: false,
      stage: "hidden" });
    gameFlowManager.startGameMap(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç—É
  },

  hideQuiz: () => {
    get().pauseTimer(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫–æ–≥–¥–∞ –∫–≤–∏–∑ —Å–∫—Ä—ã—Ç
    set({ isQuizVisible: false,
      stage: "hidden" });
  },
}));
